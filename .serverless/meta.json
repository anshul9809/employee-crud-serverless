{
  "F:\\projects\\employeeServerless": {
    "versionSfCore": null,
    "versionFramework": "4.2.1",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "env": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "employee-crud-service",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "us-east-1",
              "timeout": 20,
              "environment": {
                "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRE": "3d"
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "CreateEmployeeLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/employee-crud-service-dev-createEmployee"
                    }
                  },
                  "GetEmployeeLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/employee-crud-service-dev-getEmployee"
                    }
                  },
                  "ListEmployeesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/employee-crud-service-dev-listEmployees"
                    }
                  },
                  "UpdateEmployeeLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/employee-crud-service-dev-updateEmployee"
                    }
                  },
                  "DeleteEmployeeLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/employee-crud-service-dev-deleteEmployee"
                    }
                  },
                  "GenerateTokenLogGroup": "<REDACTED>",
                  "LogoutLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/employee-crud-service-dev-logout"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "employee-crud-service",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-crud-service-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-crud-service-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "employee-crud-service",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateEmployeeLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                      },
                      "Handler": "src/handlers/employeeHandler.createEmployee",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "employee-crud-service-dev-createEmployee",
                      "MemorySize": 1024,
                      "Timeout": 20,
                      "Environment": {
                        "Variables": {
                          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                          "JWT_SECRET": "<REDACTED>",
                          "JWT_EXPIRE": "3d"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateEmployeeLogGroup"
                    ]
                  },
                  "GetEmployeeLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                      },
                      "Handler": "src/handlers/employeeHandler.getEmployee",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "employee-crud-service-dev-getEmployee",
                      "MemorySize": 1024,
                      "Timeout": 20,
                      "Environment": {
                        "Variables": {
                          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                          "JWT_SECRET": "<REDACTED>",
                          "JWT_EXPIRE": "3d"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetEmployeeLogGroup"
                    ]
                  },
                  "ListEmployeesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                      },
                      "Handler": "src/handlers/employeeHandler.listEmployees",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "employee-crud-service-dev-listEmployees",
                      "MemorySize": 1024,
                      "Timeout": 20,
                      "Environment": {
                        "Variables": {
                          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                          "JWT_SECRET": "<REDACTED>",
                          "JWT_EXPIRE": "3d"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ListEmployeesLogGroup"
                    ]
                  },
                  "UpdateEmployeeLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                      },
                      "Handler": "src/handlers/employeeHandler.updateEmployee",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "employee-crud-service-dev-updateEmployee",
                      "MemorySize": 1024,
                      "Timeout": 20,
                      "Environment": {
                        "Variables": {
                          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                          "JWT_SECRET": "<REDACTED>",
                          "JWT_EXPIRE": "3d"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateEmployeeLogGroup"
                    ]
                  },
                  "DeleteEmployeeLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                      },
                      "Handler": "src/handlers/employeeHandler.deleteEmployee",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "employee-crud-service-dev-deleteEmployee",
                      "MemorySize": 1024,
                      "Timeout": 20,
                      "Environment": {
                        "Variables": {
                          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                          "JWT_SECRET": "<REDACTED>",
                          "JWT_EXPIRE": "3d"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteEmployeeLogGroup"
                    ]
                  },
                  "GenerateTokenLambdaFunction": "<REDACTED>",
                  "LogoutLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                      },
                      "Handler": "src/handlers/authHandler.logout",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "employee-crud-service-dev-logout",
                      "MemorySize": 1024,
                      "Timeout": 20,
                      "Environment": {
                        "Variables": {
                          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                          "JWT_SECRET": "<REDACTED>",
                          "JWT_EXPIRE": "3d"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "LogoutLogGroup"
                    ]
                  },
                  "CreateEmployeeLambdaVersionmvZsHgjDZvud2zJWjHjGsPtu2JkPUeUcKKnFVScII": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateEmployeeLambdaFunction"
                      },
                      "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
                    }
                  },
                  "GetEmployeeLambdaVersion5bWjuXv5NEGHNu0bvid2a4X4IaRjQHtKykjjuusrDg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetEmployeeLambdaFunction"
                      },
                      "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
                    }
                  },
                  "ListEmployeesLambdaVersionUSm9jCD5IJMU6NjU4sYWbNKZ5Ej9AQYCjj2l40Ijvc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ListEmployeesLambdaFunction"
                      },
                      "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
                    }
                  },
                  "UpdateEmployeeLambdaVersionN0pnnDA6KYp7aHdN7h34kvMC2Hy4wUP93IBBeyf4wvo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateEmployeeLambdaFunction"
                      },
                      "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
                    }
                  },
                  "DeleteEmployeeLambdaVersiond1ngyeaSBYTGBVDTDXZ6Nhc6zON3hgLdgJMsOWKEW4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteEmployeeLambdaFunction"
                      },
                      "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
                    }
                  },
                  "GenerateTokenLambdaVersionuYM0JEIYCbpffxkALbzLQb2QEwCxYINLwL3VQ9kzhw": "<REDACTED>",
                  "LogoutLambdaVersiondWOT3lbcDampfm7NxnsdKUZ23u0Gwa8OKGGy9wj8cpM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "LogoutLambdaFunction"
                      },
                      "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-employee-crud-service",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceEmployees": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "employees",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceEmployeesIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceEmployees"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthToken": "<REDACTED>",
                  "ApiGatewayResourceAuthLogout": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "logout",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodEmployeesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployees"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodEmployeesIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployeesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthTokenOptions": "<REDACTED>",
                  "ApiGatewayMethodAuthLogoutOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogout"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodEmployeesPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployees"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateEmployeeLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateEmployeeLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodEmployeesIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployeesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetEmployeeLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetEmployeeLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodEmployeesGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployees"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ListEmployeesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ListEmployeesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodEmployeesIdVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployeesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateEmployeeLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateEmployeeLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodEmployeesIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceEmployeesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteEmployeeLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteEmployeeLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodAuthTokenPost": "<REDACTED>",
                  "ApiGatewayMethodAuthLogoutPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogout"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "LogoutLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "LogoutLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1724329355098": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodEmployeesOptions",
                      "ApiGatewayMethodEmployeesIdVarOptions",
                      "ApiGatewayMethodAuthTokenOptions",
                      "ApiGatewayMethodAuthLogoutOptions",
                      "ApiGatewayMethodEmployeesPost",
                      "ApiGatewayMethodEmployeesIdVarGet",
                      "ApiGatewayMethodEmployeesGet",
                      "ApiGatewayMethodEmployeesIdVarPut",
                      "ApiGatewayMethodEmployeesIdVarDelete",
                      "ApiGatewayMethodAuthTokenPost",
                      "ApiGatewayMethodAuthLogoutPost"
                    ]
                  },
                  "CreateEmployeeLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetEmployeeLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ListEmployeesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ListEmployeesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateEmployeeLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteEmployeeLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteEmployeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GenerateTokenLambdaPermissionApiGateway": "<REDACTED>",
                  "LogoutLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "LogoutLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateEmployeeLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateEmployeeLambdaVersionmvZsHgjDZvud2zJWjHjGsPtu2JkPUeUcKKnFVScII"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-CreateEmployeeLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetEmployeeLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetEmployeeLambdaVersion5bWjuXv5NEGHNu0bvid2a4X4IaRjQHtKykjjuusrDg"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-GetEmployeeLambdaFunctionQualifiedArn"
                    }
                  },
                  "ListEmployeesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ListEmployeesLambdaVersionUSm9jCD5IJMU6NjU4sYWbNKZ5Ej9AQYCjj2l40Ijvc"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-ListEmployeesLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateEmployeeLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateEmployeeLambdaVersionN0pnnDA6KYp7aHdN7h34kvMC2Hy4wUP93IBBeyf4wvo"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteEmployeeLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteEmployeeLambdaVersiond1ngyeaSBYTGBVDTDXZ6Nhc6zON3hgLdgJMsOWKEW4"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
                    }
                  },
                  "GenerateTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "LogoutLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "LogoutLambdaVersiondWOT3lbcDampfm7NxnsdKUZ23u0Gwa8OKGGy9wj8cpM"
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-LogoutLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-employee-crud-service-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "createEmployee": {
                "handler": "src/handlers/employeeHandler.createEmployee",
                "events": [
                  {
                    "http": {
                      "path": "employees",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "employee-crud-service-dev-createEmployee",
                "package": {},
                "memory": 1024,
                "timeout": 20,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateEmployeeLambdaVersionmvZsHgjDZvud2zJWjHjGsPtu2JkPUeUcKKnFVScII"
              },
              "getEmployee": {
                "handler": "src/handlers/employeeHandler.getEmployee",
                "events": [
                  {
                    "http": {
                      "path": "employees/{id}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "employee-crud-service-dev-getEmployee",
                "package": {},
                "memory": 1024,
                "timeout": 20,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetEmployeeLambdaVersion5bWjuXv5NEGHNu0bvid2a4X4IaRjQHtKykjjuusrDg"
              },
              "listEmployees": {
                "handler": "src/handlers/employeeHandler.listEmployees",
                "events": [
                  {
                    "http": {
                      "path": "employees",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "employee-crud-service-dev-listEmployees",
                "package": {},
                "memory": 1024,
                "timeout": 20,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "ListEmployeesLambdaVersionUSm9jCD5IJMU6NjU4sYWbNKZ5Ej9AQYCjj2l40Ijvc"
              },
              "updateEmployee": {
                "handler": "src/handlers/employeeHandler.updateEmployee",
                "events": [
                  {
                    "http": {
                      "path": "employees/{id}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "employee-crud-service-dev-updateEmployee",
                "package": {},
                "memory": 1024,
                "timeout": 20,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateEmployeeLambdaVersionN0pnnDA6KYp7aHdN7h34kvMC2Hy4wUP93IBBeyf4wvo"
              },
              "deleteEmployee": {
                "handler": "src/handlers/employeeHandler.deleteEmployee",
                "events": [
                  {
                    "http": {
                      "path": "employees/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "employee-crud-service-dev-deleteEmployee",
                "package": {},
                "memory": 1024,
                "timeout": 20,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteEmployeeLambdaVersiond1ngyeaSBYTGBVDTDXZ6Nhc6zON3hgLdgJMsOWKEW4"
              },
              "generateToken": "<REDACTED>",
              "logout": {
                "handler": "src/handlers/authHandler.logout",
                "events": [
                  {
                    "http": {
                      "path": "auth/logout",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "employee-crud-service-dev-logout",
                "package": {},
                "memory": 1024,
                "timeout": 20,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "LogoutLambdaVersiondWOT3lbcDampfm7NxnsdKUZ23u0Gwa8OKGGy9wj8cpM"
              }
            },
            "plugins": [
              "serverless-dotenv-plugin",
              "serverless-offline"
            ],
            "custom": {
              "dotenv": {
                "path": ".env"
              }
            }
          },
          "configFileDirPath": "F:\\projects\\employeeServerless",
          "config": {
            "type": "env"
          },
          "options": {
            "verbose": true
          },
          "stage": "dev",
          "dashboard": null,
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "F:\\projects\\employeeServerless",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "employee-crud-service",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "timeout": 20,
        "environment": {
          "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
          "JWT_SECRET": "<REDACTED>",
          "JWT_EXPIRE": "3d"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "CreateEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-crud-service-dev-createEmployee"
              }
            },
            "GetEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-crud-service-dev-getEmployee"
              }
            },
            "ListEmployeesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-crud-service-dev-listEmployees"
              }
            },
            "UpdateEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-crud-service-dev-updateEmployee"
              }
            },
            "DeleteEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-crud-service-dev-deleteEmployee"
              }
            },
            "GenerateTokenLogGroup": "<REDACTED>",
            "LogoutLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/employee-crud-service-dev-logout"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "employee-crud-service",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-crud-service-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/employee-crud-service-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "employee-crud-service",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                },
                "Handler": "src/handlers/employeeHandler.createEmployee",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-crud-service-dev-createEmployee",
                "MemorySize": 1024,
                "Timeout": 20,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRE": "3d"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateEmployeeLogGroup"
              ]
            },
            "GetEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                },
                "Handler": "src/handlers/employeeHandler.getEmployee",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-crud-service-dev-getEmployee",
                "MemorySize": 1024,
                "Timeout": 20,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRE": "3d"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetEmployeeLogGroup"
              ]
            },
            "ListEmployeesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                },
                "Handler": "src/handlers/employeeHandler.listEmployees",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-crud-service-dev-listEmployees",
                "MemorySize": 1024,
                "Timeout": 20,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRE": "3d"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListEmployeesLogGroup"
              ]
            },
            "UpdateEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                },
                "Handler": "src/handlers/employeeHandler.updateEmployee",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-crud-service-dev-updateEmployee",
                "MemorySize": 1024,
                "Timeout": 20,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRE": "3d"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateEmployeeLogGroup"
              ]
            },
            "DeleteEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                },
                "Handler": "src/handlers/employeeHandler.deleteEmployee",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-crud-service-dev-deleteEmployee",
                "MemorySize": 1024,
                "Timeout": 20,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRE": "3d"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteEmployeeLogGroup"
              ]
            },
            "GenerateTokenLambdaFunction": "<REDACTED>",
            "LogoutLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/employee-crud-service/dev/1724329744588-2024-08-22T12:29:04.588Z/employee-crud-service.zip"
                },
                "Handler": "src/handlers/authHandler.logout",
                "Runtime": "nodejs18.x",
                "FunctionName": "employee-crud-service-dev-logout",
                "MemorySize": 1024,
                "Timeout": 20,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://kumaranshul9809:A8VYotutRf0RiwpQ@employee.w7vws.mongodb.net/?retryWrites=true&w=majority&appName=employee",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRE": "3d"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LogoutLogGroup"
              ]
            },
            "CreateEmployeeLambdaVersionmvZsHgjDZvud2zJWjHjGsPtu2JkPUeUcKKnFVScII": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateEmployeeLambdaFunction"
                },
                "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
              }
            },
            "GetEmployeeLambdaVersion5bWjuXv5NEGHNu0bvid2a4X4IaRjQHtKykjjuusrDg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetEmployeeLambdaFunction"
                },
                "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
              }
            },
            "ListEmployeesLambdaVersionUSm9jCD5IJMU6NjU4sYWbNKZ5Ej9AQYCjj2l40Ijvc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListEmployeesLambdaFunction"
                },
                "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
              }
            },
            "UpdateEmployeeLambdaVersionN0pnnDA6KYp7aHdN7h34kvMC2Hy4wUP93IBBeyf4wvo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateEmployeeLambdaFunction"
                },
                "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
              }
            },
            "DeleteEmployeeLambdaVersiond1ngyeaSBYTGBVDTDXZ6Nhc6zON3hgLdgJMsOWKEW4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteEmployeeLambdaFunction"
                },
                "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
              }
            },
            "GenerateTokenLambdaVersionuYM0JEIYCbpffxkALbzLQb2QEwCxYINLwL3VQ9kzhw": "<REDACTED>",
            "LogoutLambdaVersiondWOT3lbcDampfm7NxnsdKUZ23u0Gwa8OKGGy9wj8cpM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LogoutLambdaFunction"
                },
                "CodeSha256": "Bk5PGnbMIIsqlHXP7iPSpJvhTIQdcEaWp3oR0Tqd6pA="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-employee-crud-service",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceEmployees": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "employees",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceEmployeesIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthToken": "<REDACTED>",
            "ApiGatewayResourceAuthLogout": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "logout",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEmployeesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEmployeesIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthTokenOptions": "<REDACTED>",
            "ApiGatewayMethodAuthLogoutOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogout"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEmployeesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateEmployeeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEmployeesIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetEmployeeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEmployeesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployees"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListEmployeesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ListEmployeesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEmployeesIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateEmployeeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEmployeesIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEmployeesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteEmployeeLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteEmployeeLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthTokenPost": "<REDACTED>",
            "ApiGatewayMethodAuthLogoutPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogout"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LogoutLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LogoutLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1724329355098": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodEmployeesOptions",
                "ApiGatewayMethodEmployeesIdVarOptions",
                "ApiGatewayMethodAuthTokenOptions",
                "ApiGatewayMethodAuthLogoutOptions",
                "ApiGatewayMethodEmployeesPost",
                "ApiGatewayMethodEmployeesIdVarGet",
                "ApiGatewayMethodEmployeesGet",
                "ApiGatewayMethodEmployeesIdVarPut",
                "ApiGatewayMethodEmployeesIdVarDelete",
                "ApiGatewayMethodAuthTokenPost",
                "ApiGatewayMethodAuthLogoutPost"
              ]
            },
            "CreateEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListEmployeesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListEmployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteEmployeeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GenerateTokenLambdaPermissionApiGateway": "<REDACTED>",
            "LogoutLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateEmployeeLambdaVersionmvZsHgjDZvud2zJWjHjGsPtu2JkPUeUcKKnFVScII"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-CreateEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "GetEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetEmployeeLambdaVersion5bWjuXv5NEGHNu0bvid2a4X4IaRjQHtKykjjuusrDg"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-GetEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "ListEmployeesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListEmployeesLambdaVersionUSm9jCD5IJMU6NjU4sYWbNKZ5Ej9AQYCjj2l40Ijvc"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-ListEmployeesLambdaFunctionQualifiedArn"
              }
            },
            "UpdateEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateEmployeeLambdaVersionN0pnnDA6KYp7aHdN7h34kvMC2Hy4wUP93IBBeyf4wvo"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "DeleteEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteEmployeeLambdaVersiond1ngyeaSBYTGBVDTDXZ6Nhc6zON3hgLdgJMsOWKEW4"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "GenerateTokenLambdaFunctionQualifiedArn": "<REDACTED>",
            "LogoutLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LogoutLambdaVersiondWOT3lbcDampfm7NxnsdKUZ23u0Gwa8OKGGy9wj8cpM"
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-LogoutLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-employee-crud-service-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "createEmployee": {
          "handler": "src/handlers/employeeHandler.createEmployee",
          "events": [
            {
              "http": {
                "path": "employees",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-crud-service-dev-createEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 20,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateEmployeeLambdaVersionmvZsHgjDZvud2zJWjHjGsPtu2JkPUeUcKKnFVScII"
        },
        "getEmployee": {
          "handler": "src/handlers/employeeHandler.getEmployee",
          "events": [
            {
              "http": {
                "path": "employees/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-crud-service-dev-getEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 20,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetEmployeeLambdaVersion5bWjuXv5NEGHNu0bvid2a4X4IaRjQHtKykjjuusrDg"
        },
        "listEmployees": {
          "handler": "src/handlers/employeeHandler.listEmployees",
          "events": [
            {
              "http": {
                "path": "employees",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-crud-service-dev-listEmployees",
          "package": {},
          "memory": 1024,
          "timeout": 20,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "ListEmployeesLambdaVersionUSm9jCD5IJMU6NjU4sYWbNKZ5Ej9AQYCjj2l40Ijvc"
        },
        "updateEmployee": {
          "handler": "src/handlers/employeeHandler.updateEmployee",
          "events": [
            {
              "http": {
                "path": "employees/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-crud-service-dev-updateEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 20,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateEmployeeLambdaVersionN0pnnDA6KYp7aHdN7h34kvMC2Hy4wUP93IBBeyf4wvo"
        },
        "deleteEmployee": {
          "handler": "src/handlers/employeeHandler.deleteEmployee",
          "events": [
            {
              "http": {
                "path": "employees/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-crud-service-dev-deleteEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 20,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteEmployeeLambdaVersiond1ngyeaSBYTGBVDTDXZ6Nhc6zON3hgLdgJMsOWKEW4"
        },
        "generateToken": "<REDACTED>",
        "logout": {
          "handler": "src/handlers/authHandler.logout",
          "events": [
            {
              "http": {
                "path": "auth/logout",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "employee-crud-service-dev-logout",
          "package": {},
          "memory": 1024,
          "timeout": 20,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "LogoutLambdaVersiondWOT3lbcDampfm7NxnsdKUZ23u0Gwa8OKGGy9wj8cpM"
        }
      },
      "plugins": [
        "serverless-dotenv-plugin",
        "serverless-offline"
      ],
      "custom": {
        "dotenv": {
          "path": ".env"
        }
      }
    },
    "serviceRawFile": "service: employee-crud-service\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  region: us-east-1\r\n  timeout: 20\r\n  environment:\r\n    MONGO_URI: ${env:MONGO_URI}\r\n    JWT_SECRET: ${env:JWT_SECRET}\r\n\r\nfunctions:\r\n  createEmployee:\r\n    handler: src/handlers/employeeHandler.createEmployee\r\n    events:\r\n      - http:\r\n          path: employees\r\n          method: post\r\n          cors: true  \r\n\r\n  getEmployee:\r\n    handler: src/handlers/employeeHandler.getEmployee\r\n    events:\r\n      - http:\r\n          path: employees/{id}\r\n          method: get\r\n          cors: true  \r\n\r\n  listEmployees:\r\n    handler: src/handlers/employeeHandler.listEmployees\r\n    events:\r\n      - http:\r\n          path: employees\r\n          method: get\r\n          cors: true  \r\n\r\n  updateEmployee:\r\n    handler: src/handlers/employeeHandler.updateEmployee\r\n    events:\r\n      - http:\r\n          path: employees/{id}\r\n          method: put\r\n          cors: true  \r\n\r\n  deleteEmployee:\r\n    handler: src/handlers/employeeHandler.deleteEmployee\r\n    events:\r\n      - http:\r\n          path: employees/{id}\r\n          method: delete\r\n          cors: true  \r\n\r\n  generateToken:\r\n    handler: src/handlers/authHandler.generateToken\r\n    events:\r\n      - http:\r\n          path: auth/token\r\n          method: post\r\n          cors: true \r\n  logout:\r\n    handler: src/handlers/authHandler.logout\r\n    events:\r\n      - http:\r\n          path: auth/logout\r\n          method: post\r\n          cors: true \r\n\r\nplugins:\r\n  - serverless-dotenv-plugin \r\n  - serverless-offline  \r\n\r\ncustom:\r\n  dotenv:\r\n    path: .env \r\n",
    "command": [
      "deploy"
    ],
    "options": {
      "verbose": true
    },
    "error": {
      "message": "An error occurred: CreateEmployeeLambdaFunction - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: Lambda, Status Code: 400, Request ID: 74cf29ed-a739-494a-a122-5358ff4baf72)\" (RequestToken: 69cd752d-4502-53f4-afb1-bde92860cc36, HandlerErrorCode: InvalidRequest).",
      "stack": "ServerlessError2: An error occurred: CreateEmployeeLambdaFunction - Resource handler returned message: \"Unzipped size must be smaller than 262144000 bytes (Service: Lambda, Status Code: 400, Request ID: 74cf29ed-a739-494a-a122-5358ff4baf72)\" (RequestToken: 69cd752d-4502-53f4-afb1-bde92860cc36, HandlerErrorCode: InvalidRequest).\n    at file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:686:832\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async AwsDeploy.update (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:686:25423)\n    at async aws:deploy:deploy:updateStack (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:697:5474)\n    at async PluginManager.runHooks (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:884:9309)\n    at async PluginManager.invoke (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:884:10080)\n    at async PluginManager.spawn (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:884:10441)\n    at async PluginManager.runHooks (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:884:9309)\n    at async PluginManager.invoke (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:884:10080)\n    at async PluginManager.run (file:///C:/Users/kumar/.serverless/releases/4.2.1/package/dist/sf-core.js:884:10811)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_INTERNAL_LAMBDA_FUNCTION_CREATE_FAILED"
    },
    "params": {},
    "machineId": "f8767b6b677857ebcb3d8e8d452c4efc",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "b7509f25-429f-49da-a4d3-3de5b43894a8",
    "orgName": "anshul9809",
    "userId": "TSVyWbQ3lFhB3LyQnN",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "anshul9809",
    "subscription": null,
    "userEmail": "anshul9809.project@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "149536494192",
    "projectType": "framework",
    "versionSf": "4.2.1",
    "serviceProviderAwsCfStackName": "employee-crud-service-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:149536494192:stack/employee-crud-service-dev/6372bdd0-607c-11ef-8bd1-127cb01b0b55",
    "serviceProviderAwsCfStackCreated": "2024-08-22T11:48:03.389Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-22T12:30:44.958Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "employee-crud-service-dev-serverlessdeploymentbuck-k7lrqbgtkivr"
      }
    ]
  }
}